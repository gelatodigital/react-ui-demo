/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export type PromptStruct = {
  profileId: PromiseOrValue<BigNumberish>;
  prompt: PromiseOrValue<string>;
};

export type PromptStructOutput = [BigNumber, string] & {
  profileId: BigNumber;
  prompt: string;
};

export interface LensGelatoGPTInterface extends utils.Interface {
  functions: {
    "areThereNewProfileIds()": FunctionFragment;
    "collectFee(address)": FunctionFragment;
    "dedicatedMsgSender()": FunctionFragment;
    "fee()": FunctionFragment;
    "getNewProfileIds()": FunctionFragment;
    "getNewPrompts()": FunctionFragment;
    "getPaginatedPrompts(uint256,uint256)": FunctionFragment;
    "getProfileIds()": FunctionFragment;
    "lensHub()": FunctionFragment;
    "promptByProfileId(uint256)": FunctionFragment;
    "removeNewProfileIds(uint256[])": FunctionFragment;
    "setFee(uint256)": FunctionFragment;
    "setPrompt(uint256,string)": FunctionFragment;
    "stopPrompt(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "areThereNewProfileIds"
      | "collectFee"
      | "dedicatedMsgSender"
      | "fee"
      | "getNewProfileIds"
      | "getNewPrompts"
      | "getPaginatedPrompts"
      | "getProfileIds"
      | "lensHub"
      | "promptByProfileId"
      | "removeNewProfileIds"
      | "setFee"
      | "setPrompt"
      | "stopPrompt"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "areThereNewProfileIds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collectFee",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "dedicatedMsgSender",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "fee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getNewProfileIds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNewPrompts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPaginatedPrompts",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getProfileIds",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lensHub", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "promptByProfileId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeNewProfileIds",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPrompt",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "stopPrompt",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "areThereNewProfileIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "collectFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "dedicatedMsgSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getNewProfileIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNewPrompts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPaginatedPrompts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProfileIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lensHub", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "promptByProfileId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeNewProfileIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setPrompt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stopPrompt", data: BytesLike): Result;

  events: {};
}

export interface LensGelatoGPT extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LensGelatoGPTInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    areThereNewProfileIds(overrides?: CallOverrides): Promise<[boolean]>;

    collectFee(
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    dedicatedMsgSender(overrides?: CallOverrides): Promise<[string]>;

    fee(overrides?: CallOverrides): Promise<[BigNumber]>;

    getNewProfileIds(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    getNewPrompts(
      overrides?: CallOverrides
    ): Promise<[PromptStructOutput[]] & { prompts: PromptStructOutput[] }>;

    getPaginatedPrompts(
      _from: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[PromptStructOutput[]] & { prompts: PromptStructOutput[] }>;

    getProfileIds(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    lensHub(overrides?: CallOverrides): Promise<[string]>;

    promptByProfileId(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    removeNewProfileIds(
      __profileIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPrompt(
      _profileId: PromiseOrValue<BigNumberish>,
      _prompt: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stopPrompt(
      _profileId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  areThereNewProfileIds(overrides?: CallOverrides): Promise<boolean>;

  collectFee(
    _to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  dedicatedMsgSender(overrides?: CallOverrides): Promise<string>;

  fee(overrides?: CallOverrides): Promise<BigNumber>;

  getNewProfileIds(overrides?: CallOverrides): Promise<BigNumber[]>;

  getNewPrompts(overrides?: CallOverrides): Promise<PromptStructOutput[]>;

  getPaginatedPrompts(
    _from: PromiseOrValue<BigNumberish>,
    _to: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<PromptStructOutput[]>;

  getProfileIds(overrides?: CallOverrides): Promise<BigNumber[]>;

  lensHub(overrides?: CallOverrides): Promise<string>;

  promptByProfileId(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  removeNewProfileIds(
    __profileIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFee(
    _fee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPrompt(
    _profileId: PromiseOrValue<BigNumberish>,
    _prompt: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stopPrompt(
    _profileId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    areThereNewProfileIds(overrides?: CallOverrides): Promise<boolean>;

    collectFee(
      _to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    dedicatedMsgSender(overrides?: CallOverrides): Promise<string>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    getNewProfileIds(overrides?: CallOverrides): Promise<BigNumber[]>;

    getNewPrompts(overrides?: CallOverrides): Promise<PromptStructOutput[]>;

    getPaginatedPrompts(
      _from: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PromptStructOutput[]>;

    getProfileIds(overrides?: CallOverrides): Promise<BigNumber[]>;

    lensHub(overrides?: CallOverrides): Promise<string>;

    promptByProfileId(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    removeNewProfileIds(
      __profileIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPrompt(
      _profileId: PromiseOrValue<BigNumberish>,
      _prompt: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    stopPrompt(
      _profileId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    areThereNewProfileIds(overrides?: CallOverrides): Promise<BigNumber>;

    collectFee(
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    dedicatedMsgSender(overrides?: CallOverrides): Promise<BigNumber>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    getNewProfileIds(overrides?: CallOverrides): Promise<BigNumber>;

    getNewPrompts(overrides?: CallOverrides): Promise<BigNumber>;

    getPaginatedPrompts(
      _from: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProfileIds(overrides?: CallOverrides): Promise<BigNumber>;

    lensHub(overrides?: CallOverrides): Promise<BigNumber>;

    promptByProfileId(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeNewProfileIds(
      __profileIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPrompt(
      _profileId: PromiseOrValue<BigNumberish>,
      _prompt: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stopPrompt(
      _profileId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    areThereNewProfileIds(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collectFee(
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    dedicatedMsgSender(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNewProfileIds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNewPrompts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPaginatedPrompts(
      _from: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProfileIds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lensHub(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    promptByProfileId(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeNewProfileIds(
      __profileIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPrompt(
      _profileId: PromiseOrValue<BigNumberish>,
      _prompt: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stopPrompt(
      _profileId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
